--   -------------------------------------------------- 
--   Generated by Enterprise Architect Version 9.2.921
--   Created On : Friday, 05 September, 2014 
--   DBMS       : MySql 
--   -------------------------------------------------- 


SET FOREIGN_KEY_CHECKS=0;


--  Drop Tables, Stored Procedures and Views 

DROP TABLE IF EXISTS artifact CASCADE;
DROP TABLE IF EXISTS audit_record CASCADE;
DROP TABLE IF EXISTS calibration_device CASCADE;
DROP TABLE IF EXISTS calibration_measurement CASCADE;
DROP TABLE IF EXISTS calibration_record CASCADE;
DROP TABLE IF EXISTS device CASCADE;
DROP TABLE IF EXISTS device_group CASCADE;
DROP TABLE IF EXISTS device_model CASCADE;
DROP TABLE IF EXISTS module_property CASCADE;
DROP TABLE IF EXISTS role CASCADE;
DROP TABLE IF EXISTS subscription CASCADE;
DROP TABLE IF EXISTS sysuser CASCADE;
DROP TABLE IF EXISTS user_group CASCADE;
DROP TABLE IF EXISTS user_preference CASCADE;
DROP TABLE IF EXISTS user_role CASCADE;

--  Create Tables 
CREATE TABLE artifact
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	calibration_record INTEGER UNSIGNED NOT NULL,
	type VARCHAR(8) NOT NULL,
	name VARCHAR(64) NOT NULL,
	description VARCHAR(255),
	resource TEXT NOT NULL,
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (id),
	KEY (calibration_record)

) ENGINE=InnoDB;


CREATE TABLE audit_record
(
	audit_record_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	log_time TIMESTAMP NOT NULL,
	oper VARCHAR(16) NOT NULL COMMENT 'c-created,d-deleted,u-updated,l-login,o-logout',
	user VARCHAR(64) NOT NULL,
	entity_type VARCHAR(32) COMMENT 'Slot, device, or component type. ',
	entity_key VARCHAR(64) COMMENT ' key of the entity as string',
	entry TEXT NOT NULL COMMENT 'notes',
	PRIMARY KEY (audit_record_id)

) ENGINE=InnoDB COMMENT='Each row is an audit record';


CREATE TABLE calibration_device
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	calibration_record INTEGER UNSIGNED NOT NULL,
	device INTEGER UNSIGNED NOT NULL COMMENT 'equipment id',
	version INTEGER NOT NULL DEFAULT 0 COMMENT 'For concurrency control',
	PRIMARY KEY (id),
	UNIQUE UQ_caibration_record_device(calibration_record, device),
	KEY (calibration_record),
	KEY (device)

) ENGINE=InnoDB COMMENT='Each row is a device used in a calibration';


CREATE TABLE calibration_measurement
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	calibration_record INTEGER UNSIGNED NOT NULL COMMENT 'record identifier',
	step VARCHAR(32) NOT NULL COMMENT 'calibration step',
	function_tested TEXT NOT NULL COMMENT 'tested function',
	nominal_value TEXT NOT NULL COMMENT 'nominal value',
	measured_value TEXT NOT NULL COMMENT 'measured value',
	lower_tolerance TEXT NOT NULL COMMENT 'lower tolerance',
	upper_tolerance TEXT NOT NULL COMMENT 'upper tolerance',
	version INTEGER NOT NULL DEFAULT 0 COMMENT 'For concurrency control',
	PRIMARY KEY (id),
	UNIQUE UQ_calib_step(calibration_record, step),
	KEY (calibration_record)

) ENGINE=InnoDB COMMENT='Each row is a measurement in a calibration';


CREATE TABLE calibration_record
(
	calibration_record_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	device INTEGER UNSIGNED NOT NULL COMMENT 'equipment id',
	calibration_date DATE NOT NULL COMMENT 'date of calibration',
	performed_by VARCHAR(64) NOT NULL COMMENT 'who did it',
	notes TEXT COMMENT 'calibration notes',
	version INTEGER NOT NULL DEFAULT 0 COMMENT 'For optimistic concurrency control',
	PRIMARY KEY (calibration_record_id),
	KEY (device)

) ENGINE=InnoDB COMMENT='Each row represents a calibration';


CREATE TABLE device
(
	device_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	serial_number VARCHAR(64) NOT NULL COMMENT 'serial number',
	model INTEGER UNSIGNED NOT NULL COMMENT 'model identifier',
	device_group INTEGER UNSIGNED NOT NULL,
	description VARCHAR(255) NOT NULL,
	location VARCHAR(64) COMMENT 'location, if component is not installed',
	calib_standard BOOL DEFAULT 0 COMMENT 'Is it a standard for calibration',
	custodian VARCHAR(32) COMMENT 'Custodian of the equipment',
	calib_cycle INTEGER COMMENT 'calibration cycle in months',
	date_modified DATE,
	active BOOL DEFAULT 1 COMMENT 'is the equipment in active use',
	owner INTEGER UNSIGNED NOT NULL DEFAULT 1,
	modified_by VARCHAR(64),
	version INTEGER UNSIGNED NOT NULL DEFAULT 0 COMMENT 'for concurrency control',
	PRIMARY KEY (device_id),
	UNIQUE UQ_physical_component_serial_number(serial_number),
	KEY (device_group),
	KEY (owner),
	KEY (model)

) ENGINE=InnoDB COMMENT='Each row represents a calibration equipment.';


CREATE TABLE device_group
(
	group_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(64) NOT NULL,
	description VARCHAR(255),
	PRIMARY KEY (group_id)

) ENGINE=InnoDB;


CREATE TABLE device_model
(
	model_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	manufacturer VARCHAR(255) NOT NULL,
	name VARCHAR(64) NOT NULL,
	description VARCHAR(255),
	manual_uri VARCHAR(255) COMMENT 'URI for the manual',
	manual_name VARCHAR(255) COMMENT 'name of the manual',
	calibration_cycle INTEGER COMMENT 'calibration cycle in days',
	modified_by VARCHAR(64) COMMENT 'who last modified this record',
	date_modified DATE COMMENT 'when it was last modified',
	version INTEGER NOT NULL DEFAULT 0 COMMENT 'for concurrency control',
	PRIMARY KEY (model_id)

) ENGINE=InnoDB;


CREATE TABLE module_property
(
	name VARCHAR(64) NOT NULL,
	value VARCHAR(128),
	PRIMARY KEY (name)

) ENGINE=InnoDB COMMENT='Configuration info for this module ';


CREATE TABLE role
(
	role_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	name VARCHAR(64) NOT NULL,
	description VARCHAR(255) NOT NULL,
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (role_id),
	UNIQUE UQ_role_name(name)

) ENGINE=InnoDB COMMENT='Each row represents a role';


CREATE TABLE subscription
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	sysgroup INTEGER UNSIGNED NOT NULL,
	sysuser INTEGER UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY (sysgroup),
	KEY (sysuser)

) ENGINE=InnoDB COMMENT='each row is a subscription for reminders about due calibrations.';


CREATE TABLE sysuser
(
	user_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	unique_name VARCHAR(64) NOT NULL,
	name VARCHAR(128) NOT NULL,
	email VARCHAR(64),
	comment VARCHAR(255),
	version INTEGER NOT NULL DEFAULT 0,
	PRIMARY KEY (user_id),
	UNIQUE UQ_user_unique_name(unique_name)

) ENGINE=InnoDB COMMENT='Each row represents a user';


CREATE TABLE user_group
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	sysgroup INTEGER UNSIGNED NOT NULL,
	sysuser INTEGER UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY (sysgroup),
	KEY (sysuser)

) ENGINE=InnoDB COMMENT='Each row describes the group a user is interested in ';


CREATE TABLE user_preference
(
	id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	sysuser INTEGER UNSIGNED NOT NULL,
	pref_name VARCHAR(32) NOT NULL,
	pref_value VARCHAR(128) NOT NULL,
	PRIMARY KEY (id),
	UNIQUE UQ_user_prefname(sysuser, pref_name),
	KEY (sysuser)

) ENGINE=InnoDB;


CREATE TABLE user_role
(
	user_role_id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	sysuser INTEGER UNSIGNED NOT NULL,
	role INTEGER UNSIGNED NOT NULL,
	canDelegate BOOL NOT NULL DEFAULT false,
	isRoleManager BOOL NOT NULL DEFAULT false,
	startTime TIMESTAMP,
	endTime TIMESTAMP,
	comment VARCHAR(255),
	version INTEGER UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (user_role_id),
	KEY (role),
	KEY (sysuser)

) ENGINE=InnoDB COMMENT='Each row represents a user''s assignment to a role';



SET FOREIGN_KEY_CHECKS=1;


--  Create Foreign Key Constraints 
ALTER TABLE artifact ADD CONSTRAINT FK_artifact_calibration_record 
	FOREIGN KEY (calibration_record) REFERENCES calibration_record (calibration_record_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE calibration_device ADD CONSTRAINT FK_calibration_device_calibration_record 
	FOREIGN KEY (calibration_record) REFERENCES calibration_record (calibration_record_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE calibration_device ADD CONSTRAINT FK_calibration_device_physical_component 
	FOREIGN KEY (device) REFERENCES device (device_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE calibration_measurement ADD CONSTRAINT FK_calibration_measuremnt_calibration_record 
	FOREIGN KEY (calibration_record) REFERENCES calibration_record (calibration_record_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE calibration_record ADD CONSTRAINT FK_calibration_record_physical_component 
	FOREIGN KEY (device) REFERENCES device (device_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE device ADD CONSTRAINT FK_device_department 
	FOREIGN KEY (device_group) REFERENCES device_group (group_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE device ADD CONSTRAINT FK_device_sysuser 
	FOREIGN KEY (owner) REFERENCES sysuser (user_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE device ADD CONSTRAINT FK_equipment_equipment_model 
	FOREIGN KEY (model) REFERENCES device_model (model_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE subscription ADD CONSTRAINT FK_subscription_device_group 
	FOREIGN KEY (sysgroup) REFERENCES device_group (group_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE subscription ADD CONSTRAINT FK_subscription_sysuser 
	FOREIGN KEY (sysuser) REFERENCES sysuser (user_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE user_group ADD CONSTRAINT FK_user_group_device_group 
	FOREIGN KEY (sysgroup) REFERENCES device_group (group_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE user_group ADD CONSTRAINT FK_user_group_sysuser 
	FOREIGN KEY (sysuser) REFERENCES sysuser (user_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE user_preference ADD CONSTRAINT FK_user_preference_user 
	FOREIGN KEY (sysuser) REFERENCES sysuser (user_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE user_role ADD CONSTRAINT FK_user_role_role 
	FOREIGN KEY (role) REFERENCES role (role_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE user_role ADD CONSTRAINT FK_user_role_user 
	FOREIGN KEY (sysuser) REFERENCES sysuser (user_id)
	ON DELETE RESTRICT ON UPDATE CASCADE;
